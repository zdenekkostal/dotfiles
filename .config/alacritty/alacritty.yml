# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 208
    lines: 59

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 10
    y: 10

  dynamic_padding: true

  # No title bar
  decorations: "none"

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: "FiraCode Nerd Font"
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: "FiraCode Nerd Font"
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: "FiraCode Nerd Font"
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 12.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

debug:
  # Should display the render timer
  render_timer: false

color_schemes:
  # Colors (Gruvbox light)
  gruvbox_light: &gruvbox_light
    primary:
      # hard contrast: background = '#f9f5d7'
      background: "#fbf1c7"
      # soft contrast: background = '#f2e5bc'
      foreground: "#3c3836"

    normal:
      black: "#fbf1c7"
      red: "#cc241d"
      green: "#98971a"
      yellow: "#d79921"
      blue: "#458588"
      magenta: "#b16286"
      cyan: "#689d6a"
      white: "#7c6f64"

    bright:
      black: "#928374"
      red: "#9d0006"
      green: "#79740e"
      yellow: "#b57614"
      blue: "#076678"
      magenta: "#8f3f71"
      cyan: "#427b58"
      white: "#3c3836"

  # Colors (Gruvbox dark)
  gruvbox_dark: &gruvbox_dark
    primary:
      # hard contrast: background = '#1d2021'
      background: "#282828"
      # soft contrast: background = '#32302f'
      foreground: "#ebdbb2"

    normal:
      black: "#282828"
      red: "#cc241d"
      green: "#98971a"
      yellow: "#d79921"
      blue: "#458588"
      magenta: "#b16286"
      cyan: "#689d6a"
      white: "#a89984"

    bright:
      black: "#928374"
      red: "#fb4934"
      green: "#b8bb26"
      yellow: "#fabd2f"
      blue: "#83a598"
      magenta: "#d3869b"
      cyan: "#8ec07c"
      white: "#ebdbb2"

  rose_pine: &rose_pine
    primary:
      background: "0x191724"
      foreground: "0xe0def4"
    cursor:
      text: "0x191724"
      cursor: "0x796268"
    vi_mode_cursor:
      text: "0x191724"
      cursor: "0x796268"
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: "0x2A2738"
    normal:
      black: "0x6e6a86"
      red: "0xeb6f92"
      green: "0x9ccfd8"
      yellow: "0xf6c177"
      blue: "0x31748f"
      magenta: "0xc4a7e7"
      cyan: "0xebbcba"
      white: "0xe0def4"
    bright:
      black: "0x6e6a86"
      red: "0xeb6f92"
      green: "0x9ccfd8"
      yellow: "0xf6c177"
      blue: "0x31748f"
      magenta: "0xc4a7e7"
      cyan: "0xebbcba"
      white: "0xe0def4"

  rose_pine_dawn: &rose_pine_dawn
    primary:
      background: "0xfffaf3"
      foreground: "0x575279"
    cursor:
      text: "0xfaf4ed"
      cursor: "0xECC5BF"
    vi_mode_cursor:
      text: "0xfaf4ed"
      cursor: "0xECC5BF"
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: "0xF5E2DF"
    normal:
      black: "0x6e6a86"
      red: "0xb4637a"
      green: "0x56949f"
      yellow: "0xea9d34"
      blue: "0x286983"
      magenta: "0x907aa9"
      cyan: "0xd7827e"
      white: "0x575279"
    bright:
      black: "0x6e6a86"
      red: "0xeb6f92"
      green: "0x9ccfd8"
      yellow: "0xf6c177"
      blue: "0x31748f"
      magenta: "0xc4a7e7"
      cyan: "0xebbcba"
      white: "0xe0def4"

  rose_pine_moon: &rose_pine_moon
    primary:
      background: "0x232136"
      foreground: "0xe0def4"
    cursor:
      text: "0x232136"
      cursor: "0x825B65"
    vi_mode_cursor:
      text: "0x191724"
      cursor: "0x825B65"
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: "0x312E45"
    normal:
      black: "0x817c9c"
      red: "0xeb6f92"
      green: "0x9ccfd8"
      yellow: "0xf6c177"
      blue: "0x3e8fb0"
      magenta: "0xc4a7e7"
      cyan: "0xea9a97"
      white: "0xe0def4"
    bright:
      black: "0x6e6a86"
      red: "0xeb6f92"
      green: "0x9ccfd8"
      yellow: "0xf6c177"
      blue: "0x31748f"
      magenta: "0xc4a7e7"
      cyan: "0xebbcba"
      white: "0xe0def4"

colors: *rose_pine

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  duration: 0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ',â”‚`|:"'' ()[]{}<>'

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V, mods: Command, action: Paste }
  - { key: C, mods: Command, action: Copy }
  - { key: C, mods: Alt, chars: "\x1bc" }
  - { key: Q, mods: Command, action: Quit }
  - { key: W, mods: Command, action: Quit }
  - { key: Home, chars: "\x1bOH", mode: AppCursor }
  - { key: Home, chars: "\x1b[H", mode: ~AppCursor }
  - { key: End, chars: "\x1bOF", mode: AppCursor }
  - { key: End, chars: "\x1b[F", mode: ~AppCursor }
  - { key: Key0, mods: Command, action: ResetFontSize }
  - { key: Equals, mods: Command, action: IncreaseFontSize }
  - { key: Minus, mods: Command, action: DecreaseFontSize }
  - { key: PageUp, mods: Shift, chars: "\x1b[5;2~" }
  - { key: PageUp, mods: Control, chars: "\x1b[5;5~" }
  - { key: PageUp, chars: "\x1b[5~" }
  - { key: PageDown, mods: Shift, chars: "\x1b[6;2~" }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~" }
  - { key: PageDown, chars: "\x1b[6~" }
  - { key: Tab, mods: Shift, chars: "\x1b[Z" }
  - { key: Back, chars: "\x7f" }
  - { key: Back, mods: Alt, chars: "\x1b\x7f" }
  - { key: Insert, chars: "\x1b[2~" }
  - { key: Delete, chars: "\x1b[3~" }
  - { key: Left, mods: Shift, chars: "\x1b[1;2D" }
  - { key: Left, mods: Alt, chars: "\x1b[1;5D" }
  - { key: Left, chars: "\x1b[D", mode: ~AppCursor }
  - { key: Left, chars: "\x1bOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\x1b[1;2C" }
  - { key: Right, mods: Alt, chars: "\x1b[1;5C" }
  - { key: Right, chars: "\x1b[C", mode: ~AppCursor }
  - { key: Right, chars: "\x1bOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\x1b[1;2A" }
  - { key: Up, mods: Control, chars: "\x1b[1;5A" }
  - { key: Up, mods: Alt, chars: "\x1b[1;3A" }
  - { key: Up, chars: "\x1b[A", mode: ~AppCursor }
  - { key: Up, chars: "\x1bOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\x1b[1;2B" }
  - { key: Down, mods: Control, chars: "\x1b[1;5B" }
  - { key: Down, mods: Alt, chars: "\x1b[1;3B" }
  - { key: Down, chars: "\x1b[B", mode: ~AppCursor }
  - { key: Down, chars: "\x1bOB", mode: AppCursor }
  - { key: F1, chars: "\x1bOP" }
  - { key: F2, chars: "\x1bOQ" }
  - { key: F3, chars: "\x1bOR" }
  - { key: F4, chars: "\x1bOS" }
  - { key: F5, chars: "\x1b[15~" }
  - { key: F6, chars: "\x1b[17~" }
  - { key: F7, chars: "\x1b[18~" }
  - { key: F8, chars: "\x1b[19~" }
  - { key: F9, chars: "\x1b[20~" }
  - { key: F10, chars: "\x1b[21~" }
  - { key: F11, chars: "\x1b[23~" }
  - { key: F12, chars: "\x1b[24~" }
  - { key: F1, mods: Shift, chars: "\x1b[1;2P" }
  - { key: F2, mods: Shift, chars: "\x1b[1;2Q" }
  - { key: F3, mods: Shift, chars: "\x1b[1;2R" }
  - { key: F4, mods: Shift, chars: "\x1b[1;2S" }
  - { key: F5, mods: Shift, chars: "\x1b[15;2~" }
  - { key: F6, mods: Shift, chars: "\x1b[17;2~" }
  - { key: F7, mods: Shift, chars: "\x1b[18;2~" }
  - { key: F8, mods: Shift, chars: "\x1b[19;2~" }
  - { key: F9, mods: Shift, chars: "\x1b[20;2~" }
  - { key: F10, mods: Shift, chars: "\x1b[21;2~" }
  - { key: F11, mods: Shift, chars: "\x1b[23;2~" }
  - { key: F12, mods: Shift, chars: "\x1b[24;2~" }
  - { key: F1, mods: Control, chars: "\x1b[1;5P" }
  - { key: F2, mods: Control, chars: "\x1b[1;5Q" }
  - { key: F3, mods: Control, chars: "\x1b[1;5R" }
  - { key: F4, mods: Control, chars: "\x1b[1;5S" }
  - { key: F5, mods: Control, chars: "\x1b[15;5~" }
  - { key: F6, mods: Control, chars: "\x1b[17;5~" }
  - { key: F7, mods: Control, chars: "\x1b[18;5~" }
  - { key: F8, mods: Control, chars: "\x1b[19;5~" }
  - { key: F9, mods: Control, chars: "\x1b[20;5~" }
  - { key: F10, mods: Control, chars: "\x1b[21;5~" }
  - { key: F11, mods: Control, chars: "\x1b[23;5~" }
  - { key: F12, mods: Control, chars: "\x1b[24;5~" }
  - { key: F1, mods: Alt, chars: "\x1b[1;6P" }
  - { key: F2, mods: Alt, chars: "\x1b[1;6Q" }
  - { key: F3, mods: Alt, chars: "\x1b[1;6R" }
  - { key: F4, mods: Alt, chars: "\x1b[1;6S" }
  - { key: F5, mods: Alt, chars: "\x1b[15;6~" }
  - { key: F6, mods: Alt, chars: "\x1b[17;6~" }
  - { key: F7, mods: Alt, chars: "\x1b[18;6~" }
  - { key: F8, mods: Alt, chars: "\x1b[19;6~" }
  - { key: F9, mods: Alt, chars: "\x1b[20;6~" }
  - { key: F10, mods: Alt, chars: "\x1b[21;6~" }
  - { key: F11, mods: Alt, chars: "\x1b[23;6~" }
  - { key: F12, mods: Alt, chars: "\x1b[24;6~" }
  - { key: F1, mods: Command, chars: "\x1b[1;3P" }
  - { key: F2, mods: Command, chars: "\x1b[1;3Q" }
  - { key: F3, mods: Command, chars: "\x1b[1;3R" }
  - { key: F4, mods: Command, chars: "\x1b[1;3S" }
  - { key: F5, mods: Command, chars: "\x1b[15;3~" }
  - { key: F6, mods: Command, chars: "\x1b[17;3~" }
  - { key: F7, mods: Command, chars: "\x1b[18;3~" }
  - { key: F8, mods: Command, chars: "\x1b[19;3~" }
  - { key: F9, mods: Command, chars: "\x1b[20;3~" }
  - { key: F10, mods: Command, chars: "\x1b[21;3~" }
  - { key: F11, mods: Command, chars: "\x1b[23;3~" }
  - { key: F12, mods: Command, chars: "\x1b[24;3~" }
